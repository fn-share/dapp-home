#!/usr/bin/env python3
#
# python http server
# author: wayne chan
# 2023/02/19

import os, sys, base64, re, json, socketserver, mimetypes, traceback
from http.server import BaseHTTPRequestHandler

HTTP_SERVER_AT = os.path.dirname(os.path.abspath(__file__))

def is_uncache(s):
  return s[:8] == '/events/' or s == '/config.json'

_re_num = re.compile(r'^\d+$')

def is_event_file(s):
  return s == 'last' or _re_num.match(s) or (s[:5] == 'last_' and s[-5:] == '.json')

class NoCacheHttpHandler(BaseHTTPRequestHandler):
  def end_headers(self):
    if is_uncache(self.path):
      self.send_header('Cache-Control','no-cache, no-store, must-revalidate')
      self.send_header('Pragma','no-cache')
      self.send_header('Expires','0')
    BaseHTTPRequestHandler.end_headers(self)
  
  def do_GET(self):
    f_name  = os.path.join(HTTP_SERVER_AT,self.path[1:].split('?',maxsplit=1)[0])
    is_file = False
    if os.path.isfile(f_name):
      is_file = True
    elif os.path.isdir(f_name):
      f_name = os.path.join(f_name,'index.html')
      if os.path.isfile(f_name):
        is_file = True
    
    if is_file:
      s = open(f_name,'rb').read(0x2000000)   # max read 32M
      ctx_type =  mimetypes.guess_type(f_name)[0]
      self.send_response(200)
      self.send_header('Content-type',ctx_type)
      self.end_headers()
      self.wfile.write(s)
    else:
      self.send_error(404,'NOT_FOUND')
  
  def do_POST(self):
    try:
      path_arg = self.path[1:].split('?',maxsplit=1)
      url_path = path_arg[0]
      
      # step 1: list event file, for "/events/"  "/events_en/"  ...
      if url_path[-1:] == '/' and len(url_path.split('/')) == 2:
        event_folder = url_path[:-1]
        events_base = os.path.join(HTTP_SERVER_AT,event_folder)
        ret = []; b = os.listdir(events_base)
        for item in b:
          if is_event_file(item) and os.path.isfile(os.path.join(events_base,item)):
            ret.append(item)
        ret.sort()
        
        self.send_response(200)
        self.send_header('Content-type','application/json')
        self.end_headers()
        self.wfile.write(json.dumps({'result':'success','files':ret}).encode('utf-8'))
        return
      # else, next will save data.content to file
      
      # step 2: save file, "/config.json"  "/events/xxx"  "/events_en/xxx"  ...
      b = url_path.split('/')
      if url_path == 'config.json' or (len(b) == 2 and is_event_file(b[1])):
        n = int(self.headers.get('Content-Length',0))
        try:
          data = json.loads(self.rfile.read(n))
        except ValueError as e:
          self.send_response(200)
          self.send_header('Content-type','application/json')
          self.end_headers()
          error = {'result':'JSON_ERROR','error':str(e)}
          self.wfile.write(json.dumps(error).encode('utf-8'))
          return
        
        ctx = base64.b64decode(data.get('content','')).decode('utf-8')
        with open(os.path.join(HTTP_SERVER_AT,os.path.sep.join(b)),'wt') as f:
          f.write(ctx)
        
        self.send_response(200)
        self.send_header('Content-type','application/json')
        self.end_headers()
        self.wfile.write(b'{"result":"success"}')
        return
      
      # not support others
      self.send_error(404,'NOT_FOUND')
    
    except:
      traceback.print_exc()
    self.send_error(400,'FORMAT_ERROR')


if __name__ == '__main__':
  PORT = 8000
  if len(sys.argv) > 1:
    try:
      PORT = int(sys.argv[-1])
    except ValueError: pass
  
  with socketserver.TCPServer(('',PORT),NoCacheHttpHandler) as httpd:
    print('Homepage: http://localhost:%s/' % PORT)
    httpd.serve_forever()

# usage: python3 http_server [port]
